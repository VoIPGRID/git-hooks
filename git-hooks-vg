#!/bin/bash
#
# Copyright (c) 2010-2014, Benjamin C. Meyer <ben@meyerhome.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Be more verbose by setting GIT_HOOKS_VG_VERBOSE.
export GIT_HOOKS_VG_VERBOSE=${GIT_HOOKS_VG_VERBOSE:-}

# Space separated hooks to ignore.
export GIT_HOOKS_VG_IGNORE=(${GIT_HOOKS_VG_IGNORE:-""})

# Skip usingdocker when running hooks by setting GIT_HOOKS_VG_LOCAL.
export GIT_HOOKS_VG_LOCAL=${GIT_HOOKS_VG_LOCAL:-}

# Which container to use for running docker commands: web/webapp.
export GIT_HOOKS_VG_DOCKER=${GIT_HOOKS_VG_DOCKER:-web}

# Alternative ways of running ./manage, for non-docker use only.
export GIT_HOOKS_VG_DOCKER_MANAGE=${GIT_HOOKS_VG_DOCKER_MANAGE:-./manage}
export GIT_HOOKS_VG_MANAGE=${GIT_HOOKS_VG_MANAGE:-$GIT_HOOKS_VG_DOCKER_MANAGE}


RESET=$(echo -e "\033[0m")
BOLD=$(echo -e "\033[1m")
YELLOW=$(echo -e "\033[33m")
BLUE_BG=$(echo -e "\033[44m")

function header
{
    local title="$1"
    echo "${BLUE_BG}${YELLOW}${BOLD}@@ ${title}${RESET}"
    echo "------------------------------------------"
}

function header2
{
    local title="$1"
    echo "### ${BOLD}${title}${RESET}"
    echo
}

function hook_dirs
{
    if [ ! -z "${1}" ] ; then
        hook="/${1}"
    else
        hook=""
    fi
    echo "${HOME}/.git_hooks_vg${hook}"

    if git rev-parse --git-dir &> /dev/null; then
        if [ "$(git rev-parse --is-bare-repository)" = 'false' ]; then
            cd "$(git rev-parse --show-toplevel)"
            echo "${PWD}/git_hooks_vg${hook}"
        fi
    fi
}

function list_hooks_in_dir
{
    path="${1}"
    level="${2}"

    find . --help 2>&1 | grep -- '-L' 2>/dev/null >/dev/null
    if [ $? -eq 1 ] ; then
        Lopt=
    else
        Lopt=-L
    fi

    for hook in $(find ${Lopt} "${path}/" \
             -mindepth "${level}" \
             -maxdepth "${level}" \
             \( -perm -100 -o -perm -010 -o -perm -001 \) \
             -type f 2>/dev/null \
            | grep -v "^.$" | sort) ; do
        hook_name=$(basename "$hook")
        if [[ " ${GIT_HOOKS_VG_IGNORE[*]} " = *" ${hook_name} "* ]]; then
            continue
        fi

        echo "${hook}"
    done
}

function list_hooks
{
    local dir_names=(User Repository)
    local directories
    directories=$(hook_dirs)
    local index=0

    local hook_name=
    local last_dir=
    local current_dir=

    local space_size=35
    local about=

    echo 'Listing User and Project hooks:'
    echo ""

    for dir in $directories; do
        echo -e "\033[0;33m${dir_names[${index}]}\033[0m - ${dir} "
        index=$((index+1))

        hookcount=0
        for hook in $(list_hooks_in_dir "${dir}" 2) ; do
            hook_name=$(basename "$hook")
            current_dir=$(dirname "$hook")
            if [ "$current_dir" != "$last_dir" ]; then
                basename "$current_dir"
                last_dir="$current_dir"
            fi
            about=$(${hook} "--about")
            echo "  " "$(printf "%-${space_size}s%s" "$(echo -e "\033[1;36m${hook_name}\033[0m___" | sed -e 's/-/_/g' )"  | sed -e 's/ /-/g' -e 's/_/ /g' )""- $about"
            hookcount=$((hookcount+1))
        done
        if [ $hookcount -eq 0 ]; then
            echo "no hooks to run"
        fi
        echo ""
    done
}

function run_hooks
{
    dir="${1}"
    if [[ -z ${dir} || ! -d "${dir}" ]] ; then
        echo "run_hooks requires a directory name as an argument."
        return 1
    fi
    shift 1

    index=0

    for hook in $(list_hooks_in_dir "${dir}" 1)
    do
        hookname="$(basename "${dir}")"
        hookfile="$(basename "${hook}")"
        export last_run_hook="${hookname}/${hookfile}"
        if [ ! -z "${GIT_HOOKS_VG_VERBOSE}" ] ; then
            if [ "${index}" -eq 0 ] ; then
                header "${hookname}"
            fi
            header2 "${hookfile}"
        fi
        ${hook} "$@"

        index=$((index+1))
    done
}

function run_hook
{
    set -eE
    hook=$(basename "${1}")
    if [ -z "${hook}" ] ; then
        echo "run requires a hook argument"
        return 1
    fi
    shift 1
    for dir in $(hook_dirs "${hook}"); do
        if [ ! -d "${dir}" ] ; then
            continue
        fi
        run_hooks "${dir}" "$@"
    done
    set +eE
}

function install_hooks_into
{
    DIR=$1
    cd "${DIR}"

    set -e
    mv hooks hooks.old
    set +e
    mkdir hooks
    cd hooks
    for file in applypatch-msg commit-msg post-applypatch post-checkout post-commit post-merge post-receive pre-applypatch pre-auto-gc pre-commit prepare-commit-msg pre-rebase pre-receive update pre-push
    do
        echo "${2}" > "${file}"
        chmod +x "${file}"
    done
}

function install_hooks
{
    if ! GITDIR=$(git rev-parse --git-dir) ; then
        echo "$1 must be run inside a git repository"
        return 1
    fi
    cd "${GITDIR}"
    if [ "${1}" = "--install" ] ; then
        if [ -d hooks.old ] ; then
            echo "hooks.old already exists, perhaps you already installed?"
            return 1
        fi

    # The following string is intentionally containing literals for $0 and $@.
    # shellcheck disable=2016
    cmd='#!/usr/bin/env bash
git-hooks-vg run "$0" "$@"';
    install_hooks_into "${PWD}" "${cmd}"
    else
        if [ ! -d hooks.old ] ; then
            echo "Error, hooks.old doesn't exists, aborting uninstall to not destroy something"
            return 1
        fi
        rm -rf hooks
        mv hooks.old hooks
    fi
}

function report_error
{
    echo "Did not pass: $last_run_hook"
    exit 1
}

case $1 in
    run )
        # GIT_DIR is not a misspelling of GITDIR, GIT_DIR is an actual env var
        # used by git but we don't need/want it here.
        # shellcheck disable=2153
        if [ ! -z "${GIT_DIR}" ] ; then
            unset GIT_DIR
        fi
        shift
        trap report_error ERR
        run_hook "$@"
        ;;
    --install|--uninstall )
        install_hooks "$1"
        ;;
    -h|--help|-? )
        echo 'Git Hooks'
        echo '    A tool to manage project and user Git hooks for multiple git repositories.'
        echo '    Based on https://github.com/icefox/git-hooks'
        echo ''
        echo 'Options:'
        echo '    --install      Replace existing hooks in this repository with a call to'
        echo '                   git hooks run [hook].  Move old hooks directory to hooks.old'
        echo '    --uninstall    Remove existing hooks in this repository and rename hooks.old'
        echo '                   back to hooks'
        echo "    run <cmd>      Run the hooks for <cmd> (such as pre-commit)"
        echo "    (no arguments) Show currently installed hooks"
        ;;
    * )
        list_hooks
        ;;
esac
